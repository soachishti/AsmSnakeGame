Microsoft (R) Macro Assembler Version 6.15.8803		    08/22/15 01:58:51
Keyboard Toggle Keys             (Keybd.asm)		     Page 1 - 1


				; Remove usage of mWrite
				; Highly optimization need in PrintSnake

				TITLE Keyboard Toggle Keys             (Keybd.asm)

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDELIB user32.lib

 00000002			BODY STRUCT 
 00000000  00			    x BYTE 0
 00000001  00			    y BYTE 0
				BODY ENDS

 = 00000025			VK_LEFT		  EQU		000000025h
 = 00000026			VK_UP		  EQU		000000026h
 = 00000027			VK_RIGHT	  EQU		000000027h
 = 00000028			VK_DOWN		  EQU		000000028h
 = 0000004F			maxCol        EQU     79
 = 00000014			maxRow        EQU     20
 = "=======================	wallTop       EQU     "================================================================================"
   ========================
   ========================
   ========="
 = 0000007C			wallLeft      EQU     '|'
 = 00000019			SnakeSpeed    EQU     25
 = 000000FF			maxSnakeSize  EQU     255
				      
				GetKeyState PROTO, nVirtKey:DWORD

 00000000			.data
 00000000 01			    col         BYTE    1
 00000001 01			    row         BYTE    1
 00000002  000000FF [		    SnakeBody   BODY    maxSnakeSize DUP(<0,0>)
	    00 00
	   ]
 00000200 03			    currSize    BYTE    3   
 00000201 03			    currIndex   BYTE    3   ; must be same as currSize
 00000202 00			    tail        BYTE    0
 00000203 00			    tmp         BYTE    0
 00000000			.code

 00000000			InitSnakeBody PROC

 00000000  B4 28		    mov ah, 40  ;col
 00000002  B0 0A		    mov al, 10  ;row
 00000004  B9 00000000		    mov ECX, 0
 00000009  8A 0D 00000200 R	    mov cl, currSize
				    .WHILE cl
 00000011  BE 00000002 R	        MOV esi, OFFSET SnakeBody
				        
 00000016  88 24 4D		        MOV BYTE PTR SnakeBody[2 * ecx].x, ah
	   00000002 R
 0000001D  88 04 4D		        MOV BYTE PTR SnakeBody[2 * ecx].y, al
	   00000003 R
				        
				        mGotoxy SnakeBody[2 * ecx].x, SnakeBody[2 * ecx].y
 00000024  52		     1		push edx
 00000025  8A 34 4D	     1	    mov  dh,SnakeBody[2 * ecx].y
	   00000003 R
 0000002C  8A 14 4D	     1	    mov  dl,SnakeBody[2 * ecx].x
	   00000002 R
 00000033  E8 00000000 E     1		call Gotoxy
 00000038  5A		     1		pop  edx
				        mWrite "*"
 00000204		     1		.data				
 00000204 2A 00		     1		??0000 BYTE "*",0		
 00000039		     1		.code
 00000039  52		     1		push edx
 0000003A  BA 00000204 R     1		mov  edx,OFFSET ??0000
 0000003F  E8 00000000 E     1		call Writestring
 00000044  5A		     1		pop  edx
				        
 00000045  FE CC		        DEC ah
 00000047  49			        DEC ECX
				    .ENDW
				    
 0000004C			InitSnakeBody ENDP

 0000004C			addBody PROC, X:BYTE, Y:BYTE
				    ; mov dl, SnakeBody[2 * ecx - 1].x + X
				    ; mov SnakeBody[2 * ecx].x, dl
				    ; mov dl, SnakeBody[2 * ecx - 1].y + Y
				    ; mov SnakeBody[2 * ecx].y, dl
				    ; INC ECX
				    ; INC currIndex
				    ; .IF currIndex == maxSnakeSize - 1 
				        ; MOV currIndex, 0
				    ; .ENDIF  
 0000004C			addBody ENDP

 0000004C			KeySync PROC
 0000004C  B4 00		    mov ah, 0
				    INVOKE GetKeyState, VK_DOWN
					.IF ah && row < maxRow 
 00000062  FE 05 00000001 R	        INC row
				  	.ENDIF

					INVOKE GetKeyState, VK_UP
				    .IF ah && row > 0
 0000007C  FE 0D 00000001 R	        DEC row
				    .ENDIF     

					INVOKE GetKeyState, VK_LEFT
				    .IF ah && col > 0 
 00000096  FE 0D 00000000 R	        DEC col
				    .ENDIF  

					INVOKE GetKeyState, VK_RIGHT
				    .IF ah && col < maxCol
 000000B0  FE 05 00000000 R	        INC col
				    .ENDIF     
 000000B6  C3			    ret
 000000B7			KeySync ENDP

 000000B7			PrintWall PROC
				    mGotoxy 0, 0     
 000000B7  52		     1		push edx
 000000B8  B6 00	     1	    mov  dh,0
 000000BA  B2 00	     1	    mov  dl,0
 000000BC  E8 00000000 E     1		call Gotoxy
 000000C1  5A		     1		pop  edx
				    mWrite wallTop
 00000206		     1		.data				
 00000206 3D 3D 3D 3D 3D     1		??0001 BYTE wallTop,0		
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   00
 000000C2		     1		.code
 000000C2  52		     1		push edx
 000000C3  BA 00000206 R     1		mov  edx,OFFSET ??0001
 000000C8  E8 00000000 E     1		call Writestring
 000000CD  5A		     1		pop  edx
				    mGotoxy 0, maxRow    
 000000CE  52		     1		push edx
 000000CF  B6 14	     1	    mov  dh,maxRow
 000000D1  B2 00	     1	    mov  dl,0
 000000D3  E8 00000000 E     1		call Gotoxy
 000000D8  5A		     1		pop  edx
				    mWrite wallTop
 00000257		     1		.data				
 00000257 3D 3D 3D 3D 3D     1		??0002 BYTE wallTop,0		
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   00
 000000D9		     1		.code
 000000D9  52		     1		push edx
 000000DA  BA 00000257 R     1		mov  edx,OFFSET ??0002
 000000DF  E8 00000000 E     1		call Writestring
 000000E4  5A		     1		pop  edx
				        
 000000E5  B1 13		    mov cl, maxRow - 1 
				    .while cl
				        mGotoxy 0, cl   
 000000E9  52		     1		push edx
 000000EA  8A F1	     1	    mov  dh,cl
 000000EC  B2 00	     1	    mov  dl,0
 000000EE  E8 00000000 E     1		call Gotoxy
 000000F3  5A		     1		pop  edx
				        mWrite wallLeft
 000002A8		     1		.data				
 000002A8 7C 00		     1		??0003 BYTE wallLeft,0		
 000000F4		     1		.code
 000000F4  52		     1		push edx
 000000F5  BA 000002A8 R     1		mov  edx,OFFSET ??0003
 000000FA  E8 00000000 E     1		call Writestring
 000000FF  5A		     1		pop  edx
				        mGotoxy maxCol, cl
 00000100  52		     1		push edx
 00000101  8A F1	     1	    mov  dh,cl
 00000103  B2 4F	     1	    mov  dl,maxCol
 00000105  E8 00000000 E     1		call Gotoxy
 0000010A  5A		     1		pop  edx
				        mWrite wallLeft
 000002AA		     1		.data				
 000002AA 7C 00		     1		??0004 BYTE wallLeft,0		
 0000010B		     1		.code
 0000010B  52		     1		push edx
 0000010C  BA 000002AA R     1		mov  edx,OFFSET ??0004
 00000111  E8 00000000 E     1		call Writestring
 00000116  5A		     1		pop  edx
 00000117  FE C9		        DEC cl
				    .endw
 0000011D  C3			    ret
 0000011E			PrintWall ENDP

 0000011E			isGameOver PROC
				    .IF col == 0 || col == maxCol || row == 0 || row == maxRow
 00000142  B8 00000000		        mov EAX, 0
				    .ENDIF
 00000147  B8 00000001		    mov EAX, 1
 0000014C			isGameOver ENDP

 0000014C			printSnake2 PROC
				    ; mov EAX, 0 
				    ; mov ECX, 0
				    ; mov al, currSize
				    ; mov cl, currIndex

				    ; mGotoxy SnakeBody[2 * ECX - 1].x, SnakeBody[2 * ECX - 1].y ; Erase last elements
				    ; mWrite " "
				    
				    ; .WHILE eax
				        ; mGotoxy SnakeBody[2 * ECX].x, SnakeBody[2 * ECX].y
				        ; mWrite "*"
				        
				        ; .IF ECX == 0 ; Moving to end of array to continue from there
				            ; mov ECX, maxSnakeSize
				        ; .ELSE
				            ; DEC ecx
				        ; .ENDIF
				        
				        ; DEC eax
				    ; .ENDW
 0000014C			printSnake2 ENDP    
				    
 0000014C			printSnake PROC    
				    mGotoxy col, row
 0000014C  52		     1		push edx
 0000014D  8A 35 00000001 R  1	    mov  dh,row
 00000153  8A 15 00000000 R  1	    mov  dl,col
 00000159  E8 00000000 E     1		call Gotoxy
 0000015E  5A		     1		pop  edx
				    mWrite "*"    
 000002AC		     1		.data				
 000002AC 2A 00		     1		??0005 BYTE "*",0		
 0000015F		     1		.code
 0000015F  52		     1		push edx
 00000160  BA 000002AC R     1		mov  edx,OFFSET ??0005
 00000165  E8 00000000 E     1		call Writestring
 0000016A  5A		     1		pop  edx
				      
				    invoke Sleep, SnakeSpeed

				    mGotoxy col, row
 00000172  52		     1		push edx
 00000173  8A 35 00000001 R  1	    mov  dh,row
 00000179  8A 15 00000000 R  1	    mov  dl,col
 0000017F  E8 00000000 E     1		call Gotoxy
 00000184  5A		     1		pop  edx
				    mWrite " " 
 000002AE		     1		.data				
 000002AE 20 00		     1		??0006 BYTE " ",0		
 00000185		     1		.code
 00000185  52		     1		push edx
 00000186  BA 000002AE R     1		mov  edx,OFFSET ??0006
 0000018B  E8 00000000 E     1		call Writestring
 00000190  5A		     1		pop  edx
 00000191			printSnake ENDP

 00000191			printInfo PROC
				    mGotoxy 0, maxRow + 1
 00000191  52		     1		push edx
 00000192  B6 15	     1	    mov  dh,maxRow + 1
 00000194  B2 00	     1	    mov  dl,0
 00000196  E8 00000000 E     1		call Gotoxy
 0000019B  5A		     1		pop  edx
				    mWrite "Score: 123         Name: Owais       Level: Intermidiate       Press P to pause!"
 000002B0		     1		.data				
 000002B0 53 63 6F 72 65     1		??0007 BYTE "Score: 123         Name: Owais       Level: Intermidiate       Press P to pause!",0		
	   3A 20 31 32 33
	   20 20 20 20 20
	   20 20 20 20 4E
	   61 6D 65 3A 20
	   4F 77 61 69 73
	   20 20 20 20 20
	   20 20 4C 65 76
	   65 6C 3A 20 49
	   6E 74 65 72 6D
	   69 64 69 61 74
	   65 20 20 20 20
	   20 20 20 50 72
	   65 73 73 20 50
	   20 74 6F 20 70
	   61 75 73 65 21
	   00
 0000019C		     1		.code
 0000019C  52		     1		push edx
 0000019D  BA 000002B0 R     1		mov  edx,OFFSET ??0007
 000001A2  E8 00000000 E     1		call Writestring
 000001A7  5A		     1		pop  edx
				    mGotoxy 0,0
 000001A8  52		     1		push edx
 000001A9  B6 00	     1	    mov  dh,0
 000001AB  B2 00	     1	    mov  dl,0
 000001AD  E8 00000000 E     1		call Gotoxy
 000001B2  5A		     1		pop  edx
 000001B3			printInfo ENDP

 000001B3			main PROC
				    ; call getInfo ; front page
 000001B3  E8 FFFFFEFF		    call PrintWall
 000001B8  E8 FFFFFE43		    call InitSnakeBody
 000001BD  E8 FFFFFFCF		    call printInfo

				    ; ret
 000001C2			    foreverLoop:   
 000001C2  E8 FFFFFE85		        call KeySync
 000001C7  E8 FFFFFF52		        call isGameOver
				        .IF EAX
 000001D0  EB 07		            jmp GameOver
				        .ENDIF
				        
 000001D2  E8 FFFFFF75		        call printSnake        

 000001D7  EB E9		        jmp foreverLoop
				    
 000001D9			    GameOver:
				        ; Do stuff for after gameover
 000001D9  EB E7		        jmp foreverLoop
				    
					exit
 000001E2			main ENDP
				END main
Microsoft (R) Macro Assembler Version 6.15.8803		    08/22/15 01:58:51
Keyboard Toggle Keys             (Keybd.asm)		     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
NewLine  . . . . . . . . . . . .	Proc
ShowFlag . . . . . . . . . . . .	Proc
ShowRegister . . . . . . . . . .	Proc
Startup  . . . . . . . . . . . .	Proc
WriteSpace . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mNewLine . . . . . . . . . . . .	Proc
mReadStr . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteStr  . . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

BODY . . . . . . . . . . . . . .	 00000002
  x  . . . . . . . . . . . . . .	 00000000	 Byte
  y  . . . . . . . . . . . . . .	 00000001	 Byte
CONSOLE_CURSOR_INFO  . . . . . .	 00000005
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 Byte
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPos  . . . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  maxWinSize . . . . . . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000301 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001E2 DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ClrScr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
InitSnakeBody  . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000004C Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
KeySync  . . . . . . . . . . . .	P Near	 0000004C _TEXT	Length= 0000006B Public STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintWall  . . . . . . . . . . .	P Near	 000000B7 _TEXT	Length= 00000067 Public STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
addBody  . . . . . . . . . . . .	P Near	 0000004C _TEXT	Length= 00000000 Public STDCALL
  X  . . . . . . . . . . . . . .	Byte	 bp + 00000008
  Y  . . . . . . . . . . . . . .	Byte	 bp + 0000000C
isGameOver . . . . . . . . . . .	P Near	 0000011E _TEXT	Length= 0000002E Public STDCALL
main . . . . . . . . . . . . . .	P Near	 000001B3 _TEXT	Length= 0000002F Public STDCALL
  foreverLoop  . . . . . . . . .	L Near	 000001C2 _TEXT	
  GameOver . . . . . . . . . . .	L Near	 000001D9 _TEXT	
printInfo  . . . . . . . . . . .	P Near	 00000191 _TEXT	Length= 00000022 Public STDCALL
printSnake2  . . . . . . . . . .	P Near	 0000014C _TEXT	Length= 00000000 Public STDCALL
printSnake . . . . . . . . . . .	P Near	 0000014C _TEXT	Length= 00000045 Public STDCALL


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 00000204 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 00000206 _DATA	
??0002 . . . . . . . . . . . . .	Byte	 00000257 _DATA	
??0003 . . . . . . . . . . . . .	Byte	 000002A8 _DATA	
??0004 . . . . . . . . . . . . .	Byte	 000002AA _DATA	
??0005 . . . . . . . . . . . . .	Byte	 000002AC _DATA	
??0006 . . . . . . . . . . . . .	Byte	 000002AE _DATA	
??0007 . . . . . . . . . . . . .	Byte	 000002B0 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
NULL . . . . . . . . . . . . . .	Number	 00000000h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
SnakeBody  . . . . . . . . . . .	BODY	 00000002 _DATA	
SnakeSpeed . . . . . . . . . . .	Number	 00000019h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
col  . . . . . . . . . . . . . .	Byte	 00000000 _DATA	
currIndex  . . . . . . . . . . .	Byte	 00000201 _DATA	
currSize . . . . . . . . . . . .	Byte	 00000200 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxCol . . . . . . . . . . . . .	Number	 0000004Fh   
maxRow . . . . . . . . . . . . .	Number	 00000014h   
maxSnakeSize . . . . . . . . . .	Number	 000000FFh   
red  . . . . . . . . . . . . . .	Number	 00000004h   
row  . . . . . . . . . . . . . .	Byte	 00000001 _DATA	
tail . . . . . . . . . . . . . .	Byte	 00000202 _DATA	
tmp  . . . . . . . . . . . . . .	Byte	 00000203 _DATA	
wallLeft . . . . . . . . . . . .	Number	 0000007Ch   
wallTop  . . . . . . . . . . . .	Text   	 "================================================================================"
white  . . . . . . . . . . . . .	Number	 0000000Fh   
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
