Microsoft (R) Macro Assembler Version 6.15.8803		    08/23/15 02:04:52
Keyboard Toggle Keys             (Keybd.asm)		     Page 1 - 1


				; Remove usage of mWrite
				; Highly optimization need in PrintSnake
				; Problem when array end

				TITLE Keyboard Toggle Keys             (Keybd.asm)

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDELIB user32.lib


 00000002			AXIS STRUCT 
 00000000  00			    x BYTE 0
 00000001  00			    y BYTE 0
				AXIS ENDS

 = 00000025			VK_LEFT		  EQU		000000025h
 = 00000026			VK_UP		  EQU		000000026h
 = 00000027			VK_RIGHT	  EQU		000000027h
 = 00000028			VK_DOWN		  EQU		000000028h
 = 0000004F			maxCol        EQU     79
 = 00000014			maxRow        EQU     20
 = "=======================	wallTop       EQU     "================================================================================"
   ========================
   ========================
   ========="
 = 0000007C			wallLeft      EQU     '|'
 = 000000FA			maxSnakeSize  EQU     250
				      
				GetKeyState PROTO, nVirtKey:DWORD

 00000000			.data
 00000000 0000004B		    SnakeSpeed  DWORD   75
 00000004  0000000E [		    playerName  BYTE    13+1 DUP (?)
	    00
	   ]
 00000012 28			    col         BYTE    40
 00000013 0A			    row         BYTE    10
 00000014  000000FA [		    SnakeBody   AXIS    maxSnakeSize DUP(<0,0>)
	    00 00
	   ]
 00000208 03			    currSize    BYTE    3   
 00000209 03			    currIndex   BYTE    3   ; must be same as currSize
 0000020A 00000000		    tmp         DWORD   0
 0000020E 00000000		    score       DWORD   0
 00000212 00			    tChar       BYTE    0
 00000213 00 00			    FoodLoc     AXIS    <0,0>
				    
 00000215 00			    LEFT        BYTE    0
 00000216 01			    RIGHT       BYTE    1   ; Start moving to right after starting 
 00000217 00			    UP          BYTE    0
 00000218 00			    DOWN        BYTE    0
 00000219 40			    foodSign    BYTE    '@'
 00000000			.code
				INCLUDE procedures.inc
 00000000		      C SetDirection PROC, R:BYTE, L:BYTE, U:BYTE, D:BYTE
 00000003  8A 55 08	      C     mov dl, R
 00000006  88 15 00000216 R   C     mov RIGHT, dl
			      C     
 0000000C  8A 55 0C	      C     mov dl, L
 0000000F  88 15 00000215 R   C     mov LEFT, dl
			      C     
 00000015  8A 55 10	      C     mov dl, U
 00000018  88 15 00000217 R   C     mov UP, dl
			      C     
 0000001E  8A 55 14	      C     mov dl, D
 00000021  88 15 00000218 R   C     mov DOWN, dl
			      C     ret
 0000002B		      C SetDirection ENDP
			      C   
			      C 
			      C ; InitSnakeBody PROC
			      C 
			      C 
			      C     ; mov col, 40 ; update game col
			      C     ; mov row, 10 ; update game row
			      C     ; mov ah, 40  ;col
			      C     ; mov al, 10  ;row
			      C     
			      C     ; mov ecx, 0
			      C     ; mov cl, currSize
			      C     
			      C     ; .WHILE cl
			      C         ; MOV esi, OFFSET SnakeBody
			      C         
			      C         ; MOV SnakeBody[2 * ecx].x, ah
			      C         ; MOV SnakeBody[2 * ecx].y, al
			      C         
			      C         ; mGotoxy SnakeBody[2 * ecx].x, SnakeBody[2 * ecx].y
			      C         ; mWrite "*"
			      C         
			      C         ; DEC ah
			      C         ; DEC cl
			      C     ; .ENDW   
			      C     ; ; INC currSize
			      C     ; invoke SetDirection, 1, 0, 0, 0
			      C     ; ret
			      C ; InitSnakeBody ENDP
			      C 
			      C 
			      C 
 0000002B		      C KeySync PROC
 0000002B  B4 00	      C     mov ah, 0
			      C     INVOKE GetKeyState, 'p'
			      C 	.IF ah 
 00000038  B8 FFFFFFFF	      C         mov eax, -1
 0000003D  C3		      C         ret
			      C   	.ENDIF
			      C 
 0000003E  B4 00	      C     mov ah, 0
			      C     INVOKE GetKeyState, VK_DOWN
			      C 	.IF ah && row < maxRow
 00000054  FE 05 00000013 R   C         INC row
			      C         invoke SetDirection, 0, 0, 0, 1
 00000067  C3		      C         ret
			      C   	.ENDIF
			      C 
 00000068  B4 00	      C     mov ah, 0
			      C 	INVOKE GetKeyState, VK_UP
			      C     .IF ah && row > 0
 0000007E  FE 0D 00000013 R   C         DEC row
			      C         invoke SetDirection, 0, 0, 1, 0
 00000091  C3		      C         ret
			      C     .ENDIF     
			      C 
 00000092  B4 00	      C     mov ah, 0
			      C 	INVOKE GetKeyState, VK_LEFT
			      C     .IF ah && col > 0
 000000A8  FE 0D 00000012 R   C         DEC col
			      C         invoke SetDirection, 0, 1, 0, 0
 000000BB  C3		      C         ret
			      C     .ENDIF  
			      C 
 000000BC  B4 00	      C     mov ah, 0
			      C 	INVOKE GetKeyState, VK_RIGHT
			      C     .IF ah && col < maxCol
 000000D2  FE 05 00000012 R   C         INC col
			      C         invoke SetDirection, 1, 0, 0, 0
 000000E5  C3		      C         ret
			      C     .ENDIF     
			      C     
			      C     .IF RIGHT && col < maxCol
 000000F8  FE 05 00000012 R   C         INC col
			      C     .ELSEIF LEFT && col > 0
 00000112  FE 0D 00000012 R   C         DEC col
			      C     .ELSEIF UP && row > 0
 0000012C  FE 0D 00000013 R   C         DEC row
			      C     .ELSEIF DOWN&& row < maxRow
 00000146  FE 05 00000013 R   C         INC row
			      C     .ENDIF
			      C     
 0000014C  C3		      C     ret
 0000014D		      C KeySync ENDP
			      C 
 0000014D		      C EatAndGrow PROC
 0000014D  8A 25 00000012 R   C     mov ah, col
 00000153  A0 00000013 R      C     mov al, row
			      C     .IF ah == FoodLoc.x && al == FoodLoc.y
 00000168  E8 00000613	      C         call GenerateFood
 0000016D  FE 05 00000208 R   C         INC currSize
 00000173  83 05 0000020E R   C         ADD score, 10
	   0A
			      C     .ENDIF
			      C     
 0000017A  C3		      C     ret
 0000017B		      C EatAndGrow ENDP
			      C     
 0000017B		      C PrintWall PROC
			      C     mGotoxy 0, 0     
 0000017B  52		     1C 	push edx
 0000017C  B6 00	     1C     mov  dh,0
 0000017E  B2 00	     1C     mov  dl,0
 00000180  E8 00000000 E     1C 	call Gotoxy
 00000185  5A		     1C 	pop  edx
			      C     mWrite wallTop
 0000021A		     1C 	.data				
 0000021A 3D 3D 3D 3D 3D     1C 	??0000 BYTE wallTop,0		
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   00
 00000186		     1C 	.code
 00000186  52		     1C 	push edx
 00000187  BA 0000021A R     1C 	mov  edx,OFFSET ??0000
 0000018C  E8 00000000 E     1C 	call Writestring
 00000191  5A		     1C 	pop  edx
			      C     mGotoxy 0, maxRow    
 00000192  52		     1C 	push edx
 00000193  B6 14	     1C     mov  dh,maxRow
 00000195  B2 00	     1C     mov  dl,0
 00000197  E8 00000000 E     1C 	call Gotoxy
 0000019C  5A		     1C 	pop  edx
			      C     mWrite wallTop
 0000026B		     1C 	.data				
 0000026B 3D 3D 3D 3D 3D     1C 	??0001 BYTE wallTop,0		
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   00
 0000019D		     1C 	.code
 0000019D  52		     1C 	push edx
 0000019E  BA 0000026B R     1C 	mov  edx,OFFSET ??0001
 000001A3  E8 00000000 E     1C 	call Writestring
 000001A8  5A		     1C 	pop  edx
			      C         
 000001A9  B1 13	      C     mov cl, maxRow - 1 
			      C     .while cl
			      C         mGotoxy 0, cl   
 000001AD  52		     1C 	push edx
 000001AE  8A F1	     1C     mov  dh,cl
 000001B0  B2 00	     1C     mov  dl,0
 000001B2  E8 00000000 E     1C 	call Gotoxy
 000001B7  5A		     1C 	pop  edx
			      C         mWrite wallLeft
 000002BC		     1C 	.data				
 000002BC 7C 00		     1C 	??0002 BYTE wallLeft,0		
 000001B8		     1C 	.code
 000001B8  52		     1C 	push edx
 000001B9  BA 000002BC R     1C 	mov  edx,OFFSET ??0002
 000001BE  E8 00000000 E     1C 	call Writestring
 000001C3  5A		     1C 	pop  edx
			      C         mGotoxy maxCol, cl
 000001C4  52		     1C 	push edx
 000001C5  8A F1	     1C     mov  dh,cl
 000001C7  B2 4F	     1C     mov  dl,maxCol
 000001C9  E8 00000000 E     1C 	call Gotoxy
 000001CE  5A		     1C 	pop  edx
			      C         mWrite wallLeft
 000002BE		     1C 	.data				
 000002BE 7C 00		     1C 	??0003 BYTE wallLeft,0		
 000001CF		     1C 	.code
 000001CF  52		     1C 	push edx
 000001D0  BA 000002BE R     1C 	mov  edx,OFFSET ??0003
 000001D5  E8 00000000 E     1C 	call Writestring
 000001DA  5A		     1C 	pop  edx
 000001DB  FE C9	      C         DEC cl
			      C     .endw
 000001E1  C3		      C     ret
 000001E2		      C PrintWall ENDP
			      C 
 000001E2		      C isGameOver PROC
			      C     .IF col == 0 || row == 0 || col == maxCol || row == maxRow
 00000206  B8 00000001	      C         mov EAX, 1
 0000020B  C3		      C         ret
			      C     .ENDIF
 0000020C  B8 00000000	      C     mov EAX, 0 
 00000211  C3		      C     ret
 00000212		      C isGameOver ENDP
			      C 
 00000212		      C printSnake2 PROC
 00000212  B9 00000000	      C     mov ecx, 0
 00000217  8A 0D 00000209 R   C     mov cl, currIndex   ; current head pos in array
			      C     
			      C     ; Add current x and y axis to SnakeBody
 0000021D  A0 00000012 R      C     mov al, col
 00000222  8A 25 00000013 R   C     mov ah, row
			      C     
 00000228  88 04 4D	      C     mov SnakeBody[2 * ecx].x, al
	   00000014 R
 0000022F  88 24 4D	      C     mov SnakeBody[2 * ecx].y, ah
	   00000015 R
			      C     
 00000236  FE 05 00000209 R   C     INC currIndex   ; new node added
			      C     
 0000023C  A0 00000208 R      C     mov al, currSize    ; iterate till the size of snake
			      C 
			      C     mGotoxy SnakeBody[2 * ecx].x, SnakeBody[2 * ecx].y
 00000241  52		     1C 	push edx
 00000242  8A 34 4D	     1C     mov  dh,SnakeBody[2 * ecx].y
	   00000015 R
 00000249  8A 14 4D	     1C     mov  dl,SnakeBody[2 * ecx].x
	   00000014 R
 00000250  E8 00000000 E     1C 	call Gotoxy
 00000255  5A		     1C 	pop  edx
			      C     mWrite "*"  
 000002C0		     1C 	.data				
 000002C0 2A 00		     1C 	??0004 BYTE "*",0		
 00000256		     1C 	.code
 00000256  52		     1C 	push edx
 00000257  BA 000002C0 R     1C 	mov  edx,OFFSET ??0004
 0000025C  E8 00000000 E     1C 	call Writestring
 00000261  5A		     1C 	pop  edx
			      C     
			      C     invoke Sleep, SnakeSpeed
			      C     
 0000026D  BA 00000000	      C     mov edx, 0 
 00000272  B9 00000000	      C     mov ecx, 0 
 00000277  8A 0D 00000209 R   C     mov cl, currIndex
 0000027D  8A 15 00000208 R   C     mov dl, currSize
 00000283  2A CA	      C     sub cl, dl    
			      C     ;.IF cl < 0
			      C     ;    add cl, 255     ; convert negative to positive
			      C     ;    add cl, currIndex  ; subtract negative exceeding value from maxSnakeSize to get index which is at last, 254-250-0-1-2-3
			      C     ;.ENDIF
			      C     
			      C     
			      C     ; ; For handling head index when size of array exceeded
			      C     ; ; ECX will be equal to the tail
			      C     ; mov eax, 0
			      C     ; mov cl, currIndex
			      C     ; mov ah, currSize
			      C     ; .WHILE ah
			      C         ; .IF cl == 0
			      C             ; mov cl, maxSnakeSize
			      C         ; .ENDIF
			      C         ; DEC cl
			      C         ; DEC ah
			      C     ; .ENDW
			      C 
			      C     .IF SnakeBody[2 * ecx].x != 0
			      C         mGotoxy SnakeBody[2 * ecx].x, SnakeBody[2 * ecx].y
 0000028F  52		     1C 	push edx
 00000290  8A 34 4D	     1C     mov  dh,SnakeBody[2 * ecx].y
	   00000015 R
 00000297  8A 14 4D	     1C     mov  dl,SnakeBody[2 * ecx].x
	   00000014 R
 0000029E  E8 00000000 E     1C 	call Gotoxy
 000002A3  5A		     1C 	pop  edx
			      C         mWrite " " 
 000002C2		     1C 	.data				
 000002C2 20 00		     1C 	??0005 BYTE " ",0		
 000002A4		     1C 	.code
 000002A4  52		     1C 	push edx
 000002A5  BA 000002C2 R     1C 	mov  edx,OFFSET ??0005
 000002AA  E8 00000000 E     1C 	call Writestring
 000002AF  5A		     1C 	pop  edx
			      C     .ENDIF
			      C     
			      C     .IF currIndex == maxSnakeSize
 000002B9  C6 05 00000209 R   C         mov currIndex, 0
	   00
			      C     .ENDIF    
 000002C0  C3		      C     ret
 000002C1		      C printSnake2 ENDP    
			      C     
 000002C1		      C printSnake PROC    
			      C     mGotoxy col, row
 000002C1  52		     1C 	push edx
 000002C2  8A 35 00000013 R  1C     mov  dh,row
 000002C8  8A 15 00000012 R  1C     mov  dl,col
 000002CE  E8 00000000 E     1C 	call Gotoxy
 000002D3  5A		     1C 	pop  edx
			      C     mWrite "*"    
 000002C4		     1C 	.data				
 000002C4 2A 00		     1C 	??0006 BYTE "*",0		
 000002D4		     1C 	.code
 000002D4  52		     1C 	push edx
 000002D5  BA 000002C4 R     1C 	mov  edx,OFFSET ??0006
 000002DA  E8 00000000 E     1C 	call Writestring
 000002DF  5A		     1C 	pop  edx
			      C       
			      C     invoke Sleep, SnakeSpeed
			      C 
			      C     mGotoxy col, row
 000002EB  52		     1C 	push edx
 000002EC  8A 35 00000013 R  1C     mov  dh,row
 000002F2  8A 15 00000012 R  1C     mov  dl,col
 000002F8  E8 00000000 E     1C 	call Gotoxy
 000002FD  5A		     1C 	pop  edx
			      C     mWrite " "      
 000002C6		     1C 	.data				
 000002C6 20 00		     1C 	??0007 BYTE " ",0		
 000002FE		     1C 	.code
 000002FE  52		     1C 	push edx
 000002FF  BA 000002C6 R     1C 	mov  edx,OFFSET ??0007
 00000304  E8 00000000 E     1C 	call Writestring
 00000309  5A		     1C 	pop  edx
 0000030A  C3		      C     ret
 0000030B		      C printSnake ENDP
			      C 
 0000030B		      C printInfo PROC
			      C 
			      C     mGotoxy 0, maxRow+1
 0000030B  52		     1C 	push edx
 0000030C  B6 15	     1C     mov  dh,maxRow+1
 0000030E  B2 00	     1C     mov  dl,0
 00000310  E8 00000000 E     1C 	call Gotoxy
 00000315  5A		     1C 	pop  edx
			      C     mWrite "Score: "    
 000002C8		     1C 	.data				
 000002C8 53 63 6F 72 65     1C 	??0008 BYTE "Score: ",0		
	   3A 20 00
 00000316		     1C 	.code
 00000316  52		     1C 	push edx
 00000317  BA 000002C8 R     1C 	mov  edx,OFFSET ??0008
 0000031C  E8 00000000 E     1C 	call Writestring
 00000321  5A		     1C 	pop  edx
 00000322  A1 0000020E R      C     mov  eax,score
 00000327  E8 00000000 E      C     call WriteInt
			      C 
			      C     mGotoxy 20, maxRow+1
 0000032C  52		     1C 	push edx
 0000032D  B6 15	     1C     mov  dh,maxRow+1
 0000032F  B2 14	     1C     mov  dl,20
 00000331  E8 00000000 E     1C 	call Gotoxy
 00000336  5A		     1C 	pop  edx
			      C     mWrite "Name: "
 000002D0		     1C 	.data				
 000002D0 4E 61 6D 65 3A     1C 	??0009 BYTE "Name: ",0		
	   20 00
 00000337		     1C 	.code
 00000337  52		     1C 	push edx
 00000338  BA 000002D0 R     1C 	mov  edx,OFFSET ??0009
 0000033D  E8 00000000 E     1C 	call Writestring
 00000342  5A		     1C 	pop  edx
			      C     mWriteStr playerName
 00000343  52		     1C 	push edx
 00000344  BA 00000004 R     1C 	mov  edx,OFFSET playerName
 00000349  E8 00000000 E     1C 	call WriteString
 0000034E  5A		     1C 	pop  edx
			      C     
			      C     mGotoxy 40, maxRow+1    
 0000034F  52		     1C 	push edx
 00000350  B6 15	     1C     mov  dh,maxRow+1
 00000352  B2 28	     1C     mov  dl,40
 00000354  E8 00000000 E     1C 	call Gotoxy
 00000359  5A		     1C 	pop  edx
			      C     mWrite "Speed: "
 000002D7		     1C 	.data				
 000002D7 53 70 65 65 64     1C 	??000A BYTE "Speed: ",0		
	   3A 20 00
 0000035A		     1C 	.code
 0000035A  52		     1C 	push edx
 0000035B  BA 000002D7 R     1C 	mov  edx,OFFSET ??000A
 00000360  E8 00000000 E     1C 	call Writestring
 00000365  5A		     1C 	pop  edx
 00000366  A1 00000000 R      C     mov  eax,SnakeSpeed
 0000036B  E8 00000000 E      C     call WriteInt
			      C 
			      C     mGotoxy 63, maxRow+1
 00000370  52		     1C 	push edx
 00000371  B6 15	     1C     mov  dh,maxRow+1
 00000373  B2 3F	     1C     mov  dl,63
 00000375  E8 00000000 E     1C 	call Gotoxy
 0000037A  5A		     1C 	pop  edx
			      C     mWrite "Press P to pause!"
 000002DF		     1C 	.data				
 000002DF 50 72 65 73 73     1C 	??000B BYTE "Press P to pause!",0		
	   20 50 20 74 6F
	   20 70 61 75 73
	   65 21 00
 0000037B		     1C 	.code
 0000037B  52		     1C 	push edx
 0000037C  BA 000002DF R     1C 	mov  edx,OFFSET ??000B
 00000381  E8 00000000 E     1C 	call Writestring
 00000386  5A		     1C 	pop  edx
			      C     mGotoxy 0,0     
 00000387  52		     1C 	push edx
 00000388  B6 00	     1C     mov  dh,0
 0000038A  B2 00	     1C     mov  dl,0
 0000038C  E8 00000000 E     1C 	call Gotoxy
 00000391  5A		     1C 	pop  edx
 00000392  C3		      C     ret
 00000393		      C printInfo ENDP
			      C 
 00000393		      C front PROC
 00000393  E8 00000000 E      C     call ClrScr
 00000398  E8 FFFFFDDE	      C     call PrintWall
			      C     mGotoxy 25, 8
 0000039D  52		     1C 	push edx
 0000039E  B6 08	     1C     mov  dh,8
 000003A0  B2 19	     1C     mov  dl,25
 000003A2  E8 00000000 E     1C 	call Gotoxy
 000003A7  5A		     1C 	pop  edx
			      C     mWrite "SNAKE GAME"
 000002F1		     1C 	.data				
 000002F1 53 4E 41 4B 45     1C 	??000C BYTE "SNAKE GAME",0		
	   20 47 41 4D 45
	   00
 000003A8		     1C 	.code
 000003A8  52		     1C 	push edx
 000003A9  BA 000002F1 R     1C 	mov  edx,OFFSET ??000C
 000003AE  E8 00000000 E     1C 	call Writestring
 000003B3  5A		     1C 	pop  edx
			      C     mGotoxy 25, 9
 000003B4  52		     1C 	push edx
 000003B5  B6 09	     1C     mov  dh,9
 000003B7  B2 19	     1C     mov  dl,25
 000003B9  E8 00000000 E     1C 	call Gotoxy
 000003BE  5A		     1C 	pop  edx
			      C     mWrite "Developer: Owais (P14-6011)"
 000002FC		     1C 	.data				
 000002FC 44 65 76 65 6C     1C 	??000D BYTE "Developer: Owais (P14-6011)",0		
	   6F 70 65 72 3A
	   20 4F 77 61 69
	   73 20 28 50 31
	   34 2D 36 30 31
	   31 29 00
 000003BF		     1C 	.code
 000003BF  52		     1C 	push edx
 000003C0  BA 000002FC R     1C 	mov  edx,OFFSET ??000D
 000003C5  E8 00000000 E     1C 	call Writestring
 000003CA  5A		     1C 	pop  edx
			      C     mGotoxy 50, 19
 000003CB  52		     1C 	push edx
 000003CC  B6 13	     1C     mov  dh,19
 000003CE  B2 32	     1C     mov  dl,50
 000003D0  E8 00000000 E     1C 	call Gotoxy
 000003D5  5A		     1C 	pop  edx
 000003D6  E8 00000000 E      C     call WaitMsg
			      C     mGotoxy 0,0     
 000003DB  52		     1C 	push edx
 000003DC  B6 00	     1C     mov  dh,0
 000003DE  B2 00	     1C     mov  dl,0
 000003E0  E8 00000000 E     1C 	call Gotoxy
 000003E5  5A		     1C 	pop  edx
 000003E6  C3		      C     ret
 000003E7		      C front ENDP
			      C 
 000003E7		      C mainMenu PROC
 000003E7  E8 00000000 E      C     call ClrScr
 000003EC  E8 FFFFFD8A	      C     call PrintWall
			      C 
			      C     mGotoxy 30, 5
 000003F1  52		     1C 	push edx
 000003F2  B6 05	     1C     mov  dh,5
 000003F4  B2 1E	     1C     mov  dl,30
 000003F6  E8 00000000 E     1C 	call Gotoxy
 000003FB  5A		     1C 	pop  edx
			      C     mWrite "MAIN MENU"
 00000318		     1C 	.data				
 00000318 4D 41 49 4E 20     1C 	??000E BYTE "MAIN MENU",0		
	   4D 45 4E 55 00
 000003FC		     1C 	.code
 000003FC  52		     1C 	push edx
 000003FD  BA 00000318 R     1C 	mov  edx,OFFSET ??000E
 00000402  E8 00000000 E     1C 	call Writestring
 00000407  5A		     1C 	pop  edx
			      C     mGotoxy 30, 7
 00000408  52		     1C 	push edx
 00000409  B6 07	     1C     mov  dh,7
 0000040B  B2 1E	     1C     mov  dl,30
 0000040D  E8 00000000 E     1C 	call Gotoxy
 00000412  5A		     1C 	pop  edx
			      C     mWrite "Enter Name: "
 00000322		     1C 	.data				
 00000322 45 6E 74 65 72     1C 	??000F BYTE "Enter Name: ",0		
	   20 4E 61 6D 65
	   3A 20 00
 00000413		     1C 	.code
 00000413  52		     1C 	push edx
 00000414  BA 00000322 R     1C 	mov  edx,OFFSET ??000F
 00000419  E8 00000000 E     1C 	call Writestring
 0000041E  5A		     1C 	pop  edx
			      C     mReadStr playerName
 0000041F  51		     1C 	push ecx
 00000420  52		     1C 	push edx
 00000421  BA 00000004 R     1C 	mov  edx,OFFSET playerName
 00000426  B9 0000000D	     1C 	mov  ecx,(SIZEOF playerName) - 1
 0000042B  E8 00000000 E     1C 	call ReadString
 00000430  5A		     1C 	pop  edx
 00000431  59		     1C 	pop  ecx
			      C     mGotoxy 30, 9
 00000432  52		     1C 	push edx
 00000433  B6 09	     1C     mov  dh,9
 00000435  B2 1E	     1C     mov  dl,30
 00000437  E8 00000000 E     1C 	call Gotoxy
 0000043C  5A		     1C 	pop  edx
			      C     mWrite "LEVEL"
 0000032F		     1C 	.data				
 0000032F 4C 45 56 45 4C     1C 	??0010 BYTE "LEVEL",0		
	   00
 0000043D		     1C 	.code
 0000043D  52		     1C 	push edx
 0000043E  BA 0000032F R     1C 	mov  edx,OFFSET ??0010
 00000443  E8 00000000 E     1C 	call Writestring
 00000448  5A		     1C 	pop  edx
			      C     mGotoxy 30, 10  
 00000449  52		     1C 	push edx
 0000044A  B6 0A	     1C     mov  dh,10
 0000044C  B2 1E	     1C     mov  dl,30
 0000044E  E8 00000000 E     1C 	call Gotoxy
 00000453  5A		     1C 	pop  edx
			      C     mWrite "1) Basic   -> b"
 00000335		     1C 	.data				
 00000335 31 29 20 42 61     1C 	??0011 BYTE "1) Basic   -> b",0		
	   73 69 63 20 20
	   20 2D 3E 20 62
	   00
 00000454		     1C 	.code
 00000454  52		     1C 	push edx
 00000455  BA 00000335 R     1C 	mov  edx,OFFSET ??0011
 0000045A  E8 00000000 E     1C 	call Writestring
 0000045F  5A		     1C 	pop  edx
			      C     mGotoxy 30, 11 
 00000460  52		     1C 	push edx
 00000461  B6 0B	     1C     mov  dh,11
 00000463  B2 1E	     1C     mov  dl,30
 00000465  E8 00000000 E     1C 	call Gotoxy
 0000046A  5A		     1C 	pop  edx
			      C     mWrite "2) Normal  -> n"
 00000345		     1C 	.data				
 00000345 32 29 20 4E 6F     1C 	??0012 BYTE "2) Normal  -> n",0		
	   72 6D 61 6C 20
	   20 2D 3E 20 6E
	   00
 0000046B		     1C 	.code
 0000046B  52		     1C 	push edx
 0000046C  BA 00000345 R     1C 	mov  edx,OFFSET ??0012
 00000471  E8 00000000 E     1C 	call Writestring
 00000476  5A		     1C 	pop  edx
			      C     mGotoxy 30, 12 
 00000477  52		     1C 	push edx
 00000478  B6 0C	     1C     mov  dh,12
 0000047A  B2 1E	     1C     mov  dl,30
 0000047C  E8 00000000 E     1C 	call Gotoxy
 00000481  5A		     1C 	pop  edx
			      C     mWrite "3) Advance -> a"
 00000355		     1C 	.data				
 00000355 33 29 20 41 64     1C 	??0013 BYTE "3) Advance -> a",0		
	   76 61 6E 63 65
	   20 2D 3E 20 61
	   00
 00000482		     1C 	.code
 00000482  52		     1C 	push edx
 00000483  BA 00000355 R     1C 	mov  edx,OFFSET ??0013
 00000488  E8 00000000 E     1C 	call Writestring
 0000048D  5A		     1C 	pop  edx
			      C     mGotoxy 30, 13 
 0000048E  52		     1C 	push edx
 0000048F  B6 0D	     1C     mov  dh,13
 00000491  B2 1E	     1C     mov  dl,30
 00000493  E8 00000000 E     1C 	call Gotoxy
 00000498  5A		     1C 	pop  edx
			      C     mWrite "4) Expert  -> e"
 00000365		     1C 	.data				
 00000365 34 29 20 45 78     1C 	??0014 BYTE "4) Expert  -> e",0		
	   70 65 72 74 20
	   20 2D 3E 20 65
	   00
 00000499		     1C 	.code
 00000499  52		     1C 	push edx
 0000049A  BA 00000365 R     1C 	mov  edx,OFFSET ??0014
 0000049F  E8 00000000 E     1C 	call Writestring
 000004A4  5A		     1C 	pop  edx
			      C     mGotoxy 30, 14 
 000004A5  52		     1C 	push edx
 000004A6  B6 0E	     1C     mov  dh,14
 000004A8  B2 1E	     1C     mov  dl,30
 000004AA  E8 00000000 E     1C 	call Gotoxy
 000004AF  5A		     1C 	pop  edx
			      C     mWrite "Choice: "
 00000375		     1C 	.data				
 00000375 43 68 6F 69 63     1C 	??0015 BYTE "Choice: ",0		
	   65 3A 20 00
 000004B0		     1C 	.code
 000004B0  52		     1C 	push edx
 000004B1  BA 00000375 R     1C 	mov  edx,OFFSET ??0015
 000004B6  E8 00000000 E     1C 	call Writestring
 000004BB  5A		     1C 	pop  edx
 000004BC  E8 00000000 E      C     call ReadChar    
 000004C1  A2 00000212 R      C     mov  tChar,al 
 000004C6  E8 00000000 E      C     call WriteChar
			      C 
			      C     .IF tChar == 'b'
 000004D4  C7 05 00000000 R   C         mov SnakeSpeed, 100 
	   00000064
			      C     .ELSEIF tChar == 'n'
 000004E9  C7 05 00000000 R   C         mov SnakeSpeed, 75 
	   0000004B
			      C     .ELSEIF tChar == 'a'
 000004FE  C7 05 00000000 R   C         mov SnakeSpeed, 50 
	   00000032
			      C     .ELSEIF tChar == 'e'
 00000513  C7 05 00000000 R   C         mov SnakeSpeed, 25 
	   00000019
			      C     .ENDIF
			      C     invoke Sleep, 100
			      C     mGotoxy 0,0
 00000524  52		     1C 	push edx
 00000525  B6 00	     1C     mov  dh,0
 00000527  B2 00	     1C     mov  dl,0
 00000529  E8 00000000 E     1C 	call Gotoxy
 0000052E  5A		     1C 	pop  edx
 0000052F  E8 00000000 E      C     call ClrScr
 00000534  C3		      C     ret
 00000535		      C mainMenu ENDP
			      C 
 00000535		      C pausedView PROC
 00000535  E8 00000000 E      C     call ClrScr
 0000053A  E8 FFFFFC3C	      C     call PrintWall
			      C     mGotoxy 30, 7
 0000053F  52		     1C 	push edx
 00000540  B6 07	     1C     mov  dh,7
 00000542  B2 1E	     1C     mov  dl,30
 00000544  E8 00000000 E     1C 	call Gotoxy
 00000549  5A		     1C 	pop  edx
			      C     mWrite "GAMED PAUSED"
 0000037E		     1C 	.data				
 0000037E 47 41 4D 45 44     1C 	??0016 BYTE "GAMED PAUSED",0		
	   20 50 41 55 53
	   45 44 00
 0000054A		     1C 	.code
 0000054A  52		     1C 	push edx
 0000054B  BA 0000037E R     1C 	mov  edx,OFFSET ??0016
 00000550  E8 00000000 E     1C 	call Writestring
 00000555  5A		     1C 	pop  edx
			      C     mGotoxy 30, 9
 00000556  52		     1C 	push edx
 00000557  B6 09	     1C     mov  dh,9
 00000559  B2 1E	     1C     mov  dl,30
 0000055B  E8 00000000 E     1C 	call Gotoxy
 00000560  5A		     1C 	pop  edx
			      C     mWrite "OPTIONS"
 0000038B		     1C 	.data				
 0000038B 4F 50 54 49 4F     1C 	??0017 BYTE "OPTIONS",0		
	   4E 53 00
 00000561		     1C 	.code
 00000561  52		     1C 	push edx
 00000562  BA 0000038B R     1C 	mov  edx,OFFSET ??0017
 00000567  E8 00000000 E     1C 	call Writestring
 0000056C  5A		     1C 	pop  edx
			      C     mGotoxy 30, 10  
 0000056D  52		     1C 	push edx
 0000056E  B6 0A	     1C     mov  dh,10
 00000570  B2 1E	     1C     mov  dl,30
 00000572  E8 00000000 E     1C 	call Gotoxy
 00000577  5A		     1C 	pop  edx
			      C     mWrite "1) Resume    -> r"
 00000393		     1C 	.data				
 00000393 31 29 20 52 65     1C 	??0018 BYTE "1) Resume    -> r",0		
	   73 75 6D 65 20
	   20 20 20 2D 3E
	   20 72 00
 00000578		     1C 	.code
 00000578  52		     1C 	push edx
 00000579  BA 00000393 R     1C 	mov  edx,OFFSET ??0018
 0000057E  E8 00000000 E     1C 	call Writestring
 00000583  5A		     1C 	pop  edx
			      C     mGotoxy 30, 11  
 00000584  52		     1C 	push edx
 00000585  B6 0B	     1C     mov  dh,11
 00000587  B2 1E	     1C     mov  dl,30
 00000589  E8 00000000 E     1C 	call Gotoxy
 0000058E  5A		     1C 	pop  edx
			      C     mWrite "2) Restart   -> t"
 000003A5		     1C 	.data				
 000003A5 32 29 20 52 65     1C 	??0019 BYTE "2) Restart   -> t",0		
	   73 74 61 72 74
	   20 20 20 2D 3E
	   20 74 00
 0000058F		     1C 	.code
 0000058F  52		     1C 	push edx
 00000590  BA 000003A5 R     1C 	mov  edx,OFFSET ??0019
 00000595  E8 00000000 E     1C 	call Writestring
 0000059A  5A		     1C 	pop  edx
			      C     mGotoxy 30, 12 
 0000059B  52		     1C 	push edx
 0000059C  B6 0C	     1C     mov  dh,12
 0000059E  B2 1E	     1C     mov  dl,30
 000005A0  E8 00000000 E     1C 	call Gotoxy
 000005A5  5A		     1C 	pop  edx
			      C     mWrite "3) Main Menu -> m"
 000003B7		     1C 	.data				
 000003B7 33 29 20 4D 61     1C 	??001A BYTE "3) Main Menu -> m",0		
	   69 6E 20 4D 65
	   6E 75 20 2D 3E
	   20 6D 00
 000005A6		     1C 	.code
 000005A6  52		     1C 	push edx
 000005A7  BA 000003B7 R     1C 	mov  edx,OFFSET ??001A
 000005AC  E8 00000000 E     1C 	call Writestring
 000005B1  5A		     1C 	pop  edx
			      C     mGotoxy 30, 13 
 000005B2  52		     1C 	push edx
 000005B3  B6 0D	     1C     mov  dh,13
 000005B5  B2 1E	     1C     mov  dl,30
 000005B7  E8 00000000 E     1C 	call Gotoxy
 000005BC  5A		     1C 	pop  edx
			      C     mWrite "4) Exit      -> e"
 000003C9		     1C 	.data				
 000003C9 34 29 20 45 78     1C 	??001B BYTE "4) Exit      -> e",0		
	   69 74 20 20 20
	   20 20 20 2D 3E
	   20 65 00
 000005BD		     1C 	.code
 000005BD  52		     1C 	push edx
 000005BE  BA 000003C9 R     1C 	mov  edx,OFFSET ??001B
 000005C3  E8 00000000 E     1C 	call Writestring
 000005C8  5A		     1C 	pop  edx
			      C     mGotoxy 30, 14 
 000005C9  52		     1C 	push edx
 000005CA  B6 0E	     1C     mov  dh,14
 000005CC  B2 1E	     1C     mov  dl,30
 000005CE  E8 00000000 E     1C 	call Gotoxy
 000005D3  5A		     1C 	pop  edx
			      C     mWrite "Choice: "
 000003DB		     1C 	.data				
 000003DB 43 68 6F 69 63     1C 	??001C BYTE "Choice: ",0		
	   65 3A 20 00
 000005D4		     1C 	.code
 000005D4  52		     1C 	push edx
 000005D5  BA 000003DB R     1C 	mov  edx,OFFSET ??001C
 000005DA  E8 00000000 E     1C 	call Writestring
 000005DF  5A		     1C 	pop  edx
 000005E0  E8 00000000 E      C     call ReadChar
 000005E5  A2 00000212 R      C     mov  tChar,al  
 000005EA  E8 00000000 E      C     call WriteChar
			      C     invoke Sleep, 100
			      C     
			      C     .IF tChar == 'r'
 000005FF  B8 00000000	      C         mov EAX, 0
			      C     .ELSEIF tChar == 't'
 0000060F  B8 00000001	      C         mov EAX, 1
			      C     .ELSEIF tChar == 'm'
 0000061F  B8 00000002	      C         mov EAX, 2
			      C     .ELSE
 00000626  B8 00000003	      C         mov EAX, 3
			      C     .ENDIF
			      C     invoke Sleep, 1000
			      C     mGotoxy 0,0      
 00000635  52		     1C 	push edx
 00000636  B6 00	     1C     mov  dh,0
 00000638  B2 00	     1C     mov  dl,0
 0000063A  E8 00000000 E     1C 	call Gotoxy
 0000063F  5A		     1C 	pop  edx
 00000640  C3		      C     ret
 00000641		      C pausedView ENDP
			      C 
 00000641		      C gameOverView PROC   
 00000641  E8 00000000 E      C     call Clrscr
 00000646  E8 FFFFFB30	      C     call PrintWall
			      C     mGotoxy 30, 7
 0000064B  52		     1C 	push edx
 0000064C  B6 07	     1C     mov  dh,7
 0000064E  B2 1E	     1C     mov  dl,30
 00000650  E8 00000000 E     1C 	call Gotoxy
 00000655  5A		     1C 	pop  edx
			      C     mWrite "GAME OVER!!!"
 000003E4		     1C 	.data				
 000003E4 47 41 4D 45 20     1C 	??001D BYTE "GAME OVER!!!",0		
	   4F 56 45 52 21
	   21 21 00
 00000656		     1C 	.code
 00000656  52		     1C 	push edx
 00000657  BA 000003E4 R     1C 	mov  edx,OFFSET ??001D
 0000065C  E8 00000000 E     1C 	call Writestring
 00000661  5A		     1C 	pop  edx
			      C     mGotoxy 30, 9  
 00000662  52		     1C 	push edx
 00000663  B6 09	     1C     mov  dh,9
 00000665  B2 1E	     1C     mov  dl,30
 00000667  E8 00000000 E     1C 	call Gotoxy
 0000066C  5A		     1C 	pop  edx
			      C     mWrite "Score:"
 000003F1		     1C 	.data				
 000003F1 53 63 6F 72 65     1C 	??001E BYTE "Score:",0		
	   3A 00
 0000066D		     1C 	.code
 0000066D  52		     1C 	push edx
 0000066E  BA 000003F1 R     1C 	mov  edx,OFFSET ??001E
 00000673  E8 00000000 E     1C 	call Writestring
 00000678  5A		     1C 	pop  edx
 00000679  A1 0000020E R      C     mov eax, score
 0000067E  E8 00000000 E      C     call WriteInt
			      C     mGotoxy 30, 11  
 00000683  52		     1C 	push edx
 00000684  B6 0B	     1C     mov  dh,11
 00000686  B2 1E	     1C     mov  dl,30
 00000688  E8 00000000 E     1C 	call Gotoxy
 0000068D  5A		     1C 	pop  edx
			      C     mWrite "OPTIONS"
 000003F8		     1C 	.data				
 000003F8 4F 50 54 49 4F     1C 	??001F BYTE "OPTIONS",0		
	   4E 53 00
 0000068E		     1C 	.code
 0000068E  52		     1C 	push edx
 0000068F  BA 000003F8 R     1C 	mov  edx,OFFSET ??001F
 00000694  E8 00000000 E     1C 	call Writestring
 00000699  5A		     1C 	pop  edx
			      C     mGotoxy 30, 12 
 0000069A  52		     1C 	push edx
 0000069B  B6 0C	     1C     mov  dh,12
 0000069D  B2 1E	     1C     mov  dl,30
 0000069F  E8 00000000 E     1C 	call Gotoxy
 000006A4  5A		     1C 	pop  edx
			      C     mWrite "1) Restart   -> t"
 00000400		     1C 	.data				
 00000400 31 29 20 52 65     1C 	??0020 BYTE "1) Restart   -> t",0		
	   73 74 61 72 74
	   20 20 20 2D 3E
	   20 74 00
 000006A5		     1C 	.code
 000006A5  52		     1C 	push edx
 000006A6  BA 00000400 R     1C 	mov  edx,OFFSET ??0020
 000006AB  E8 00000000 E     1C 	call Writestring
 000006B0  5A		     1C 	pop  edx
			      C     mGotoxy 30, 13
 000006B1  52		     1C 	push edx
 000006B2  B6 0D	     1C     mov  dh,13
 000006B4  B2 1E	     1C     mov  dl,30
 000006B6  E8 00000000 E     1C 	call Gotoxy
 000006BB  5A		     1C 	pop  edx
			      C     mWrite "2) Main Menu -> m"
 00000412		     1C 	.data				
 00000412 32 29 20 4D 61     1C 	??0021 BYTE "2) Main Menu -> m",0		
	   69 6E 20 4D 65
	   6E 75 20 2D 3E
	   20 6D 00
 000006BC		     1C 	.code
 000006BC  52		     1C 	push edx
 000006BD  BA 00000412 R     1C 	mov  edx,OFFSET ??0021
 000006C2  E8 00000000 E     1C 	call Writestring
 000006C7  5A		     1C 	pop  edx
			      C     mGotoxy 30, 14 
 000006C8  52		     1C 	push edx
 000006C9  B6 0E	     1C     mov  dh,14
 000006CB  B2 1E	     1C     mov  dl,30
 000006CD  E8 00000000 E     1C 	call Gotoxy
 000006D2  5A		     1C 	pop  edx
			      C     mWrite "3) Exit      -> any key"
 00000424		     1C 	.data				
 00000424 33 29 20 45 78     1C 	??0022 BYTE "3) Exit      -> any key",0		
	   69 74 20 20 20
	   20 20 20 2D 3E
	   20 61 6E 79 20
	   6B 65 79 00
 000006D3		     1C 	.code
 000006D3  52		     1C 	push edx
 000006D4  BA 00000424 R     1C 	mov  edx,OFFSET ??0022
 000006D9  E8 00000000 E     1C 	call Writestring
 000006DE  5A		     1C 	pop  edx
			      C     mGotoxy 30, 15 
 000006DF  52		     1C 	push edx
 000006E0  B6 0F	     1C     mov  dh,15
 000006E2  B2 1E	     1C     mov  dl,30
 000006E4  E8 00000000 E     1C 	call Gotoxy
 000006E9  5A		     1C 	pop  edx
			      C     mWrite "Choice: "
 0000043C		     1C 	.data				
 0000043C 43 68 6F 69 63     1C 	??0023 BYTE "Choice: ",0		
	   65 3A 20 00
 000006EA		     1C 	.code
 000006EA  52		     1C 	push edx
 000006EB  BA 0000043C R     1C 	mov  edx,OFFSET ??0023
 000006F0  E8 00000000 E     1C 	call Writestring
 000006F5  5A		     1C 	pop  edx
			      C     
 000006F6  B8 00000000	      C     mov eax, 0  
 000006FB  E8 00000000 E      C     call ReadChar
 00000700  A2 00000212 R      C     mov  tChar,al  
 00000705  E8 00000000 E      C     call WriteChar
			      C     invoke Sleep, 100
			      C         
			      C     .IF tChar == 't'
 0000071A  B8 00000000	      C         mov eax, 0    
			      C     .ELSEIF tChar == 'm'
 0000072A  B8 00000001	      C         mov eax, 1
			      C     .ELSE
 00000731  B8 00000002	      C         mov eax, 2
			      C     .ENDIF
			      C         
			      C     mGotoxy 0,0     
 00000736  52		     1C 	push edx
 00000737  B6 00	     1C     mov  dh,0
 00000739  B2 00	     1C     mov  dl,0
 0000073B  E8 00000000 E     1C 	call Gotoxy
 00000740  5A		     1C 	pop  edx
 00000741  C3		      C     ret 
 00000742		      C gameOverView ENDP
			      C 
 00000742		      C ResetData PROC
 00000742  C7 05 00000000 R   C     mov SnakeSpeed, 25    
	   00000019
 0000074C  C6 05 00000012 R   C     mov col, 40
	   28
 00000753  C6 05 00000013 R   C     mov row, 10 
	   0A
 0000075A  C6 05 00000208 R   C     mov currSize, 3
	   03
 00000761  C6 05 00000209 R   C     mov currIndex, 3
	   03
 00000768  C7 05 0000020E R   C     mov score, 0
	   00000000
			      C     invoke SetDirection, 1,0,0,0
 0000077F  C3		      C     ret
 00000780		      C ResetData ENDP
			      C 
 00000780		      C GenerateFood PROC
 00000780  E8 00000000 E      C     call Randomize
			      C 
 00000785  E8 00000000 E      C     call Random32   
 0000078A  33 D2	      C     XOR EDX,EDX
 0000078C  B9 0000004E	      C     MOV ECX, maxCol - 1
 00000791  F7 F1	      C     DIV ECX
 00000793  FE C2	      C     inc dl
 00000795  88 15 00000213 R   C     mov FoodLoc.x, dl
			      C 
 0000079B  E8 00000000 E      C     call Random32   
 000007A0  33 D2	      C     XOR EDX,EDX
 000007A2  B9 00000013	      C     MOV ECX, maxRow - 1
 000007A7  F7 F1	      C     DIV ECX
 000007A9  FE C2	      C     inc dl
 000007AB  88 15 00000214 R   C     mov FoodLoc.y, dl
			      C     
			      C     mGotoxy FoodLoc.x, FoodLoc.y
 000007B1  52		     1C 	push edx
 000007B2  8A 35 00000214 R  1C     mov  dh,FoodLoc.y
 000007B8  8A 15 00000213 R  1C     mov  dl,FoodLoc.x
 000007BE  E8 00000000 E     1C 	call Gotoxy
 000007C3  5A		     1C 	pop  edx
 000007C4  A0 00000219 R      C     mov al, foodSign
 000007C9  E8 00000000 E      C     call WriteChar
 000007CE  C3		      C     ret
 000007CF		      C GenerateFood ENDP
			      C 

 000007CF			main PROC    
 000007CF  E8 FFFFFBBF		    call front ; front page
				    
 000007D4			    StartFromMenu:
 000007D4  E8 FFFFFC0E		    call mainMenu
				    
 000007D9			    Restart:
 000007D9  E8 FFFFFFA2		    call GenerateFood
 000007DE  E8 FFFFF998		    call PrintWall
				   
 000007E3			    foreverLoop:   
 000007E3  E8 FFFFF965		        call EatAndGrow
 000007E8  E8 FFFFF83E		        call KeySync
				        .IF EAX == -1
 000007F2  EB 1E		            jmp GamePaused
				        .ENDIF

 000007F4  E8 FFFFF9E9		        call isGameOver
				        .IF EAX == 1
 000007FE  EB 5D		            jmp GameOver
				        .ENDIF
				        
 00000800  E8 FFFFFA0D		        call printSnake2  
 00000805  E8 FFFFFB01		        call printInfo
 0000080A  FF 05 0000020E R	        INC score
 00000810  EB D1		       jmp foreverLoop
				   
 00000812			    GamePaused:
				        invoke Sleep, 100
 00000819  E8 FFFFFD17		        call pausedView
 0000081E  A2 00000212 R	        mov tChar, al
				        .IF tChar == 0      ;Resume
 0000082C  EB AB		            jmp Restart
				        .ELSEIF tChar == 1  ;Restart
 00000839  E8 FFFFFF04		            call ResetData
 0000083E  EB 99		            jmp Restart
				        .ELSEIF tChar == 2
 0000084B  EB 87		            jmp StartFromMenu
				        .ELSE 
 0000084F  E8 00000000 E	            call ClrScr
				            invoke ExitProcess, 0
				        .ENDIF
 0000085B  EB 86		        jmp foreverLoop
				   
 0000085D			    GameOver:
				        invoke Sleep, 500
				        ; Do stuff for after gameover
 00000867  E8 FFFFFDD5		        call gameOverView 
 0000086C  A2 00000212 R	        mov tChar, al           ; if we dont store value in memory .IF will change EAX while processing

				        .IF tChar == 0      ; Restart
 0000087A  E8 FFFFFEC3		            call ResetData
 0000087F  E8 00000000 E	            call ClrScr
 00000884  E9 FFFFFF50		            jmp Restart
 00000889  C3			            ret
				        .ELSEIF tChar == 1  ; Main menu
 00000895  E9 FFFFFF3A		            jmp StartFromMenu
				            ; Main Menu
				        .ELSE
 0000089C  E8 00000000 E	            call ClrScr
				            invoke ExitProcess, 0
				        .ENDIF
 000008A8  E9 FFFFFF36		        jmp foreverLoop
				    
					exit
 000008B4			main ENDP
				END main
Microsoft (R) Macro Assembler Version 6.15.8803		    08/23/15 02:04:52
Keyboard Toggle Keys             (Keybd.asm)		     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
NewLine  . . . . . . . . . . . .	Proc
ShowFlag . . . . . . . . . . . .	Proc
ShowRegister . . . . . . . . . .	Proc
Startup  . . . . . . . . . . . .	Proc
WriteSpace . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mNewLine . . . . . . . . . . . .	Proc
mReadStr . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteStr  . . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

AXIS . . . . . . . . . . . . . .	 00000002
  x  . . . . . . . . . . . . . .	 00000000	 Byte
  y  . . . . . . . . . . . . . .	 00000001	 Byte
CONSOLE_CURSOR_INFO  . . . . . .	 00000005
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 Byte
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPos  . . . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  maxWinSize . . . . . . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000445 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000008B4 DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ClrScr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
EatAndGrow . . . . . . . . . . .	P Near	 0000014D _TEXT	Length= 0000002E Public STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GenerateFood . . . . . . . . . .	P Near	 00000780 _TEXT	Length= 0000004F Public STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
KeySync  . . . . . . . . . . . .	P Near	 0000002B _TEXT	Length= 00000122 Public STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintWall  . . . . . . . . . . .	P Near	 0000017B _TEXT	Length= 00000067 Public STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ResetData  . . . . . . . . . . .	P Near	 00000742 _TEXT	Length= 0000003E Public STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetDirection . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000002B Public STDCALL
  R  . . . . . . . . . . . . . .	Byte	 bp + 00000008
  L  . . . . . . . . . . . . . .	Byte	 bp + 0000000C
  U  . . . . . . . . . . . . . .	Byte	 bp + 00000010
  D  . . . . . . . . . . . . . .	Byte	 bp + 00000014
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
front  . . . . . . . . . . . . .	P Near	 00000393 _TEXT	Length= 00000054 Public STDCALL
gameOverView . . . . . . . . . .	P Near	 00000641 _TEXT	Length= 00000101 Public STDCALL
isGameOver . . . . . . . . . . .	P Near	 000001E2 _TEXT	Length= 00000030 Public STDCALL
mainMenu . . . . . . . . . . . .	P Near	 000003E7 _TEXT	Length= 0000014E Public STDCALL
main . . . . . . . . . . . . . .	P Near	 000007CF _TEXT	Length= 000000E5 Public STDCALL
  StartFromMenu  . . . . . . . .	L Near	 000007D4 _TEXT	
  Restart  . . . . . . . . . . .	L Near	 000007D9 _TEXT	
  foreverLoop  . . . . . . . . .	L Near	 000007E3 _TEXT	
  GamePaused . . . . . . . . . .	L Near	 00000812 _TEXT	
  GameOver . . . . . . . . . . .	L Near	 0000085D _TEXT	
pausedView . . . . . . . . . . .	P Near	 00000535 _TEXT	Length= 0000010C Public STDCALL
printInfo  . . . . . . . . . . .	P Near	 0000030B _TEXT	Length= 00000088 Public STDCALL
printSnake2  . . . . . . . . . .	P Near	 00000212 _TEXT	Length= 000000AF Public STDCALL
printSnake . . . . . . . . . . .	P Near	 000002C1 _TEXT	Length= 0000004A Public STDCALL


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 0000021A _DATA	
??0001 . . . . . . . . . . . . .	Byte	 0000026B _DATA	
??0002 . . . . . . . . . . . . .	Byte	 000002BC _DATA	
??0003 . . . . . . . . . . . . .	Byte	 000002BE _DATA	
??0004 . . . . . . . . . . . . .	Byte	 000002C0 _DATA	
??0005 . . . . . . . . . . . . .	Byte	 000002C2 _DATA	
??0006 . . . . . . . . . . . . .	Byte	 000002C4 _DATA	
??0007 . . . . . . . . . . . . .	Byte	 000002C6 _DATA	
??0008 . . . . . . . . . . . . .	Byte	 000002C8 _DATA	
??0009 . . . . . . . . . . . . .	Byte	 000002D0 _DATA	
??000A . . . . . . . . . . . . .	Byte	 000002D7 _DATA	
??000B . . . . . . . . . . . . .	Byte	 000002DF _DATA	
??000C . . . . . . . . . . . . .	Byte	 000002F1 _DATA	
??000D . . . . . . . . . . . . .	Byte	 000002FC _DATA	
??000E . . . . . . . . . . . . .	Byte	 00000318 _DATA	
??000F . . . . . . . . . . . . .	Byte	 00000322 _DATA	
??0010 . . . . . . . . . . . . .	Byte	 0000032F _DATA	
??0011 . . . . . . . . . . . . .	Byte	 00000335 _DATA	
??0012 . . . . . . . . . . . . .	Byte	 00000345 _DATA	
??0013 . . . . . . . . . . . . .	Byte	 00000355 _DATA	
??0014 . . . . . . . . . . . . .	Byte	 00000365 _DATA	
??0015 . . . . . . . . . . . . .	Byte	 00000375 _DATA	
??0016 . . . . . . . . . . . . .	Byte	 0000037E _DATA	
??0017 . . . . . . . . . . . . .	Byte	 0000038B _DATA	
??0018 . . . . . . . . . . . . .	Byte	 00000393 _DATA	
??0019 . . . . . . . . . . . . .	Byte	 000003A5 _DATA	
??001A . . . . . . . . . . . . .	Byte	 000003B7 _DATA	
??001B . . . . . . . . . . . . .	Byte	 000003C9 _DATA	
??001C . . . . . . . . . . . . .	Byte	 000003DB _DATA	
??001D . . . . . . . . . . . . .	Byte	 000003E4 _DATA	
??001E . . . . . . . . . . . . .	Byte	 000003F1 _DATA	
??001F . . . . . . . . . . . . .	Byte	 000003F8 _DATA	
??0020 . . . . . . . . . . . . .	Byte	 00000400 _DATA	
??0021 . . . . . . . . . . . . .	Byte	 00000412 _DATA	
??0022 . . . . . . . . . . . . .	Byte	 00000424 _DATA	
??0023 . . . . . . . . . . . . .	Byte	 0000043C _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DOWN . . . . . . . . . . . . . .	Byte	 00000218 _DATA	
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FoodLoc  . . . . . . . . . . . .	AXIS	 00000213 _DATA	
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
LEFT . . . . . . . . . . . . . .	Byte	 00000215 _DATA	
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
NULL . . . . . . . . . . . . . .	Number	 00000000h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT  . . . . . . . . . . . . .	Byte	 00000216 _DATA	
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
SnakeBody  . . . . . . . . . . .	AXIS	 00000014 _DATA	
SnakeSpeed . . . . . . . . . . .	DWord	 00000000 _DATA	
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UP . . . . . . . . . . . . . . .	Byte	 00000217 _DATA	
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
col  . . . . . . . . . . . . . .	Byte	 00000012 _DATA	
currIndex  . . . . . . . . . . .	Byte	 00000209 _DATA	
currSize . . . . . . . . . . . .	Byte	 00000208 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
foodSign . . . . . . . . . . . .	Byte	 00000219 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxCol . . . . . . . . . . . . .	Number	 0000004Fh   
maxRow . . . . . . . . . . . . .	Number	 00000014h   
maxSnakeSize . . . . . . . . . .	Number	 000000FAh   
playerName . . . . . . . . . . .	Byte	 00000004 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
row  . . . . . . . . . . . . . .	Byte	 00000013 _DATA	
score  . . . . . . . . . . . . .	DWord	 0000020E _DATA	
tChar  . . . . . . . . . . . . .	Byte	 00000212 _DATA	
tmp  . . . . . . . . . . . . . .	DWord	 0000020A _DATA	
wallLeft . . . . . . . . . . . .	Number	 0000007Ch   
wallTop  . . . . . . . . . . . .	Text   	 "================================================================================"
white  . . . . . . . . . . . . .	Number	 0000000Fh   
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
